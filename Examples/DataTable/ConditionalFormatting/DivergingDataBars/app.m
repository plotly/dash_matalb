clear all
close all
terminate(pyenv);

% read data file
data = readtable('condForm4.csv', 'PreserveVariableNames', true);
try
    data = data([1:40],[1:7]); % Select first 40 rows and first 7 columns
catch
end

% create Dash app
table_app = createApp();

% create ui elements
uifig = uifigure('visible', 'off');
uit = uitable(uifig, 'ColumnName', data.Properties.VariableNames, 'Data', data, 'visible', 'off');

%% Define struct which stores uitable properties like styling
% An example with cell and header stylings,
% as well as page_size property is provided:
%{
uit.UserData = struct(...
    'style_cell', struct(...
        'page_size', 3,...
        'textAlign', 'center',...
        'backgroundColor', 'rgb(50,50,50)',...
        'color', 'white',...
        'font_size', '16px',...
        'padding', '5px'),...
    'style_header', struct(...
        'backgroundColor', 'rgb(30,30,30)',...
        'fontWeight', 'bold'),...
    'page_size', 10);
%}
%%

n_bins = 100;
color_above = '#3D9970';
color_below = '#FF4136';
bounds = {n_bins+1};
for i=1:n_bins+1
    bounds{i} = (i-1)*(1.0/n_bins);
end
columns = ["lifeExp", "gdpPercap"];

styles = {};
for j=1:length(columns)
    col = columns(j);
    maxC = max(data{:,col});
    minC = min(data{:,col});

    ranges = {length(bounds)};
    for i=1:length(bounds)
        ranges{i} = ((maxC-minC)*bounds{i})+minC;
    end
    
    midpoint = (maxC+minC)/2;

    for i=2:length(bounds)
        min_bound = ranges{i-1};
        max_bound = ranges{i};
        min_bound_percentage = bounds{i-1}*100;
        max_bound_percentage = bounds{i}*100;

        if i < length(bounds)-2
            cond = sprintf('{%s} >= %d && {%s} < %d', col, min_bound, col, max_bound);
        else
            cond = sprintf('{%s} >= %d', col, min_bound);
        end
        
        if max_bound > midpoint
            background = sprintf(""+...
                            "linear-gradient(90deg,"+...
                            "white 0%%,"+...
                            "white 50%%,"+...
                            "%s 50%%,"+...
                            "%s %d%%,"+...
                            "white %d%%,"+...
                            "white 100%%"+...
                                "", color_above, color_above, max_bound_percentage,max_bound_percentage);
        else
            background = sprintf(""+...
                            "linear-gradient(90deg,"+...
                            "white 0%%,"+...
                            "white %d%%,"+...
                            "%s %d%%,"+...
                            "%s 50%%,"+...
                            "white 50%%,"+...
                            "white 100%%"+...
                                "", min_bound_percentage, color_below, min_bound_percentage,color_below);
        end
        
        styles{end+1} = struct(...
            'if', struct('filter_query', cond,...
            'column_id', sprintf('%s', col)),...
            'paddingBottom', 2,...
            'paddingTop', 2,...
            'background', background);
    end  
end

style_data_conditional = py.list(styles);

uit.UserData = struct(...
    'sort_action', 'native',...
    'style_data_conditional', style_data_conditional,...
    'style_cell', struct(...
        'width','100px',...
        'minWidth','100px',...
        'maxWidth','100px',...
        'overflow','hidden',...
        'textOverflow','ellipsis'),...
    'page_size', 8);

dash_table = ui2dash(uit, 'table');

% add table to Dash app layout
table_app.layout = addLayout(dash_table);

% run the app
table_app.run_server(pyargs('debug',true,'use_reloader',false,'port','8057'))